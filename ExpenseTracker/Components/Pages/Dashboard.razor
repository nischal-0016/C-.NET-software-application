@page "/dashboard"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject TransactionService TransactionService
@implements IDisposable

<h3>Dashboard</h3>

<div class="summary-section">
    <h4>Summary</h4>
    <div class="summary-grid">
        <div class="summary-item">
            <label>Total Inflows:</label>
            <span class="amount positive">Rs @TotalInflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Outflows:</label>
            <span class="amount negative">Rs @TotalOutflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Debts:</label>
            <span class="amount">Rs @TotalDebts.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Pending Debts:</label>
            <span class="amount negative">Rs @PendingDebts.ToString("N2")</span>
        </div>
    </div>
</div>

<div class="filter-section">
    <h4>Your Transactions</h4>
    <div class="filter-grid">
        <div>
            <InputDate @bind-Value="StartDate" TValue="DateTime" class="form-control" />
            <span>to</span>
            <InputDate @bind-Value="EndDate" TValue="DateTime" class="form-control" />
        </div>
        <div>
            <label>Filter by Type:</label>
            <select @bind="SelectedType" class="form-control">
                <option value="All">All</option>
                <option value="Inflow">Inflow</option>
                <option value="Outflow">Outflow</option>
                <option value="Debt">Debt</option>
            </select>
        </div>
        <button @onclick="FilterTransactions" class="btn btn-primary">Apply Filter</button>
    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.Title</td>
                    <td>
                        <span class="badge @GetTypeClass(transaction.Type)">
                            @transaction.Type
                        </span>
                    </td>
                    <td class="@GetAmountClass(transaction.Type)">
                        Rs @transaction.Amount.ToString("N2")
                    </td>
                    <td>@transaction.Notes</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="mt-4 d-flex justify-content-end">
    <button class="btn btn-danger" @onclick="ShowClearConfirmation">
        Clear All Transactions
    </button>
</div>

@if (showConfirmDialog)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Clear</h5>
                    <button type="button" class="close" @onclick="HideClearConfirmation">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to clear all transactions? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideClearConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ClearAllTransactions">Clear All</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private string SelectedType { get; set; } = "All";
    private List<TransactionItem> FilteredTransactions { get; set; } = new();
    private bool showConfirmDialog = false;

    protected override void OnInitialized()
    {
        TransactionService.OnChange += StateHasChanged;
        FilterTransactions();
    }

    public void Dispose()
    {
        TransactionService.OnChange -= StateHasChanged;
    }

    private void FilterTransactions()
    {
        var transactions = TransactionService.GetFilteredTransactions(StartDate, EndDate);

        if (SelectedType != "All")
        {
            transactions = transactions.Where(t => t.Type == SelectedType).ToList();
        }

        FilteredTransactions = transactions;
        StateHasChanged();
    }

    private decimal TotalInflows => TransactionService.Transactions
        .Where(t => t.Type == "Inflow")
        .Sum(t => t.Amount);

    private decimal TotalOutflows => TransactionService.Transactions
        .Where(t => t.Type == "Outflow")
        .Sum(t => t.Amount);

    private decimal TotalDebts
    {
        get
        {
            var debts = TransactionService.Transactions
                .Where(t => t.Type == "Debt")
                .ToList();

            decimal totalDebt = 0;

            foreach (var debt in debts)
            {
                var payments = TransactionService.Transactions
                    .Where(t => t.Type == "DebtPayment" && t.RelatedTransactionId == debt.Id)
                    .Sum(t => t.Amount);

                totalDebt += debt.Amount;
            }

            return totalDebt;
        }
    }

    private decimal PendingDebts
    {
        get
        {
            var debts = TransactionService.Transactions
                .Where(t => t.Type == "Debt")
                .ToList();

            decimal totalPending = 0;

            foreach (var debt in debts)
            {
                if (!debt.IsPaid)
                {
                    var payments = TransactionService.Transactions
                        .Where(t => t.Type == "DebtPayment" && t.RelatedTransactionId == debt.Id)
                        .Sum(t => t.Amount);

                    totalPending += debt.Amount - payments;
                }
            }

            return totalPending;
        }
    }

    private string GetTypeClass(string type) => type.ToLower() switch
    {
        "inflow" => "badge-inflow",
        "outflow" => "badge-outflow",
        "debt" => "badge-debt",
        "debtpayment" => "badge-success",
        _ => ""
    };

    private string GetAmountClass(string type) => type.ToLower() switch
    {
        "inflow" => "text-success",
        "outflow" => "text-danger",
        "debt" => "text-warning",
        "debtpayment" => "text-success",
        _ => ""
    };

    private void ShowClearConfirmation()
    {
        showConfirmDialog = true;
    }

    private void HideClearConfirmation()
    {
        showConfirmDialog = false;
    }

    private void ClearAllTransactions()
    {
        TransactionService.ClearAllTransactions();
        FilterTransactions();
        showConfirmDialog = false;
    }
}
