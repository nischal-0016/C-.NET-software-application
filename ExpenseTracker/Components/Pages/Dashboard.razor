@page "/dashboard"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject TransactionService TransactionService
@implements IDisposable

<h3>Dashboard</h3>

<div class="summary-section">
    <h4>Summary</h4>
    <div class="summary-grid">
        <div class="summary-item">
            <label>Total Inflows:</label>
            <span class="amount positive">Rs @TotalInflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Outflows:</label>
            <span class="amount negative">Rs @TotalOutflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Debts:</label>
            <span class="amount">Rs @TotalDebts.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Pending Debts:</label>
            <span class="amount negative">Rs @PendingDebts.ToString("N2")</span>
        </div>
    </div>
</div>

<div class="filter-section">
    <h4>Your Transactions</h4>
    <div class="date-filter">
        <label>Filter by Date:</label>
        <InputDate @bind-Value="StartDate" class="form-control" />
        <span>to</span>
        <InputDate @bind-Value="EndDate" class="form-control" />
        <button @onclick="FilterTransactions" class="btn btn-primary">Apply Filter</button>
    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.Title</td>
                    <td>
                        <span class="badge @GetTypeClass(transaction.Type)">
                            @transaction.Type
                        </span>
                    </td>
                    <td class="@GetAmountClass(transaction.Type)">
                        Rs @transaction.Amount.ToString("N2")
                    </td>
                    <td>@transaction.Notes</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private List<TransactionItem> FilteredTransactions { get; set; } = new();

    protected override void OnInitialized()
    {
        TransactionService.OnChange += StateHasChanged;
        FilterTransactions();
    }

    public void Dispose()
    {
        TransactionService.OnChange -= StateHasChanged;
    }

    private void FilterTransactions()
    {
        FilteredTransactions = TransactionService.GetFilteredTransactions(StartDate, EndDate);
        StateHasChanged();
    }

    private decimal TotalInflows => TransactionService.Transactions
        .Where(t => t.Type == "Inflow")
        .Sum(t => t.Amount);

    private decimal TotalOutflows => TransactionService.Transactions
        .Where(t => t.Type == "Outflow")
        .Sum(t => t.Amount);

    private decimal TotalDebts => TransactionService.Transactions
        .Where(t => t.Type == "Debt")
        .Sum(t => t.Amount);

    private decimal PendingDebts => TransactionService.Transactions
        .Where(t => t.Type == "Debt" && t.Amount > 0)
        .Sum(t => t.Amount);

    private string GetTypeClass(string type) => type.ToLower() switch
    {
        "inflow" => "badge-inflow",
        "outflow" => "badge-outflow",
        "debt" => "badge-debt",
        _ => ""
    };

    private string GetAmountClass(string type) => type.ToLower() switch
    {
        "inflow" => "text-success",
        "outflow" => "text-danger",
        "debt" => "text-warning",
        _ => ""
    };
}
