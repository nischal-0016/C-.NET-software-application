@page "/dashboard"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject TransactionService TransactionService
@implements IDisposable

<h3>Dashboard</h3>

<div class="summary-section">
    <h4>Summary</h4>
    <div class="summary-grid">
        <div class="summary-item">
            <label>Total Inflows:</label>
            <span class="amount positive">Rs @TotalInflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Expense:</label>
            <span class="amount negative">Rs @TotalOutflows.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Paid Debts:</label>
            <span class="amount positive">Rs @TotalPaidDebts.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Pending Debts:</label>
            <span class="amount negative">Rs @PendingDebts.ToString("N2")</span>
        </div>
        <div class="summary-item">
            <label>Total Balance:</label>
            <span class="amount balance">Rs @TotalBalance.ToString("N2")</span>
        </div>
    </div>
</div>

<div class="filter-section">
    <h4>Your Transactions</h4>
    <div class="filter-grid">
        <div>
            <InputDate @bind-Value="StartDate" TValue="DateTime" class="form-control" />
            <span>to</span>
            <InputDate @bind-Value="EndDate" TValue="DateTime" class="form-control" />
        </div>
        <div>
            <label>Filter by Type:</label>
            <select @bind="SelectedType" class="form-control">
                <option value="All">All</option>
                <option value="Inflow">Inflow</option>
                <option value="Outflow">Outflow</option>
                <option value="Debt">Debt</option>
                <option value="DebtPayment">Debt Payment</option>
            </select>
        </div>
        <div>
            <label>Filter by Tag:</label>
            <input type="text" @bind="TagFilter" class="form-control" placeholder="Enter tag to filter" />
        </div>
        <button @onclick="FilterTransactions" class="btn btn-primary">Apply Filter</button>
    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Type</th>
                <th>Amount</th>
                <th>Notes</th>
                <th>Tag</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.Title</td>
                    <td>
                        @if (transaction.Type == "Inflow")
                        {
                            <span class="badge badge-inflow">@transaction.Type</span>
                        }
                        else if (transaction.Type == "Outflow")
                        {
                            <span class="badge badge-outflow">@transaction.Type</span>
                        }
                        else if (transaction.Type == "Debt")
                        {
                            <span class="badge badge-debt">@transaction.Type</span>
                        }
                        else if (transaction.Type == "DebtPayment")
                        {
                            <span class="badge badge-debt-payment">@transaction.Type</span>
                        }
                        else
                        {
                            <span>@transaction.Type</span>
                        }
                    </td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Notes</td>
                    <td>
                        @if (!string.IsNullOrEmpty(transaction.Tag))
                        {
                            <span class="badge badge-info">@transaction.Tag</span>
                        }
                        else
                        {
                            <span class="text-muted">No Tag</span>
                        }
                    </td>
                </tr>
            }
        </tbody>

    </table>
</div>

<div class="mt-4 d-flex justify-content-end">
    <button class="btn btn-danger" @onclick="ShowClearConfirmation">
        Clear All Transactions
    </button>
</div>

@if (showConfirmDialog)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Clear</h5>
                    <button type="button" class="close" @onclick="HideClearConfirmation">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to clear all transactions? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideClearConfirmation">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ClearAllTransactions">Clear All</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private string SelectedType { get; set; } = "All";
    private string TagFilter { get; set; } = string.Empty;
    private List<TransactionItem> FilteredTransactions { get; set; } = new();
    private bool showConfirmDialog = false;

    public decimal TotalInflows => TransactionService.Transactions
        .Where(t => t.Type == "Inflow")
        .Sum(t => t.Amount);

    public decimal TotalOutflows => TransactionService.Transactions
        .Where(t => t.Type == "Outflow")
        .Sum(t => t.Amount);

    public decimal TotalPaidDebts => TransactionService.Transactions
        .Where(t => t.Type == "DebtPayment")
        .Sum(t => t.Amount);

    public decimal PendingDebts => TransactionService.Transactions
        .Where(t => t.Type == "Debt" && !t.IsPaid)
        .Sum(debt => debt.Amount - TransactionService.Transactions
            .Where(t => t.Type == "DebtPayment" && t.RelatedTransactionId == debt.Id)
            .Sum(t => t.Amount));

    public decimal TotalBalance => Math.Max(0, TotalInflows - TotalOutflows - PendingDebts);

    protected override void OnInitialized()
    {
        TransactionService.OnChange += StateHasChanged;
        FilterTransactions();
    }

    public void Dispose()
    {
        TransactionService.OnChange -= StateHasChanged;
    }

    private void FilterTransactions()
    {
        var transactions = TransactionService.Transactions
            .Where(t => t.Date >= StartDate && t.Date <= EndDate)
            .ToList();

        if (SelectedType != "All")
        {
            transactions = transactions.Where(t =>
                SelectedType == "Debt"
                    ? t.Type == "Debt" || t.Type == "DebtPayment"
                    : t.Type == SelectedType).ToList();
        }

        if (!string.IsNullOrEmpty(TagFilter))
        {
            transactions = transactions.Where(t => t.Tag != null && t.Tag.Contains(TagFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        FilteredTransactions = transactions;
    }



    private void ShowClearConfirmation()
    {
        showConfirmDialog = true;
    }

    private void HideClearConfirmation()
    {
        showConfirmDialog = false;
    }

    private void ClearAllTransactions()
    {
        TransactionService.ClearAllTransactions();
        FilterTransactions();
        showConfirmDialog = false;
    }

    private decimal Inflow { get; set; }
    private decimal Outflow { get; set; }
    private string ErrorMessage { get; set; }

    private void ProcessTransaction()
    {
        ErrorMessage = string.Empty;

        // Validate outflow does not exceed balance
        if (Outflow > TotalBalance)
        {
            ErrorMessage = "Outflow exceeds available balance.";
            return;
        }

        // Process inflow
        if (Inflow > 0)
        {
            TransactionService.AddTransaction(new TransactionItem
                {
                    Date = DateTime.Now,
                    Title = "Inflow",
                    Type = "Inflow",
                    Amount = Inflow
                });
        }

        // Process outflow
        if (Outflow > 0)
        {
            TransactionService.AddTransaction(new TransactionItem
                {
                    Date = DateTime.Now,
                    Title = "Outflow",
                    Type = "Outflow",
                    Amount = Outflow
                });
        }

        // Reset input fields and update state
        Inflow = 0;
        Outflow = 0;
        ErrorMessage = string.Empty;
        StateHasChanged();
    }
}


