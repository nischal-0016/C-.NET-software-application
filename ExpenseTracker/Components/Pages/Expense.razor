@page "/expenses"
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@inject TransactionService TransactionService
@inject TagService TagService
@inject NavigationManager NavigationManager

<h3>Add Transaction</h3>

<EditForm Model="@newTransaction" OnValidSubmit="@AddTransaction" class="transaction-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Date:</label>
        <InputDate @bind-Value="newTransaction.Date" class="form-control" />
    </div>

    <div class="form-group">
        <label>Title:</label>
        <InputText @bind-Value="newTransaction.Title" class="form-control" />
        <ValidationMessage For="@(() => newTransaction.Title)" />
    </div>

    <div class="form-group">
        <label>Amount:</label>
        <InputNumber @bind-Value="newTransaction.Amount" class="form-control" />
        <ValidationMessage For="@(() => newTransaction.Amount)" />
    </div>

    <div class="form-group">
        <label>Transaction Type:</label>
        <InputSelect @bind-Value="newTransaction.Type" class="form-control" @onchange="HandleTypeChange">
            <option value="">Select Type</option>
            <option value="Inflow">Inflow</option>
            <option value="Outflow">Outflow</option>
            <option value="Debt">Debt</option>
        </InputSelect>
        <ValidationMessage For="@(() => newTransaction.Type)" />
    </div>

    @if (newTransaction.Type == "Inflow" && HasPendingDebts)
    {
        <div class="form-group">
            <label>Apply to Debt:</label>
            <InputSelect @bind-Value="selectedDebtId" class="form-control">
                <option value="">Don't apply to debt</option>
                @foreach (var debt in PendingDebts)
                {
                    <option value="@debt.Id">@debt.Title - Rs @debt.Amount.ToString("N2")</option>
                }
            </InputSelect>
        </div>
    }

    <div class="form-group">
        <label>Tag (Optional):</label>
        <InputSelect @bind-Value="selectedTag" class="form-control">
            <option value="">Select Tag</option>
            @foreach (var tag in TagService.Tags)
            {
                <option value="@tag">@tag</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Notes:</label>
        <InputTextArea @bind-Value="newTransaction.Notes" class="form-control" />
    </div>

    <div class="button-group">
        <button type="submit" class="btn btn-primary">Add Transaction</button>
        <button type="button" class="btn btn-secondary" @onclick="NavigateToDashboard">Cancel</button>
    </div>
</EditForm>

@code {
    private TransactionItem newTransaction = new() { Date = DateTime.Today };
    private string selectedTag;
    private string selectedDebtId;
    private bool HasPendingDebts => PendingDebts.Any();

    private List<TransactionItem> PendingDebts => TransactionService.Transactions
        .Where(t => t.Type == "Debt" && !t.IsPaid)
        .ToList();

    // Available Balance Calculation
    private decimal AvailableBalance
    {
        get
        {
            var totalInflow = TransactionService.Transactions
                .Where(t => t.Type == "Inflow")
                .Sum(t => t.Amount);

            var totalOutflow = TransactionService.Transactions
                .Where(t => t.Type == "Outflow")
                .Sum(t => t.Amount);

            var totalDebt = PendingDebts.Sum(t => t.Amount);

            return totalInflow - totalOutflow - totalDebt;
        }
    }

    private void HandleTypeChange(ChangeEventArgs e)
    {
        selectedDebtId = string.Empty;
    }

    private void AddTransaction()
    {
        if (!string.IsNullOrWhiteSpace(selectedTag))
        {
            newTransaction.Tag = selectedTag;
        }

        if (newTransaction.Type == "Inflow" && !string.IsNullOrEmpty(selectedDebtId))
        {
            var debt = TransactionService.Transactions
                .FirstOrDefault(t => t.Id == selectedDebtId);

            if (debt != null)
            {
                HandleDebtPayment(debt);
            }
            else
            {
                TransactionService.AddTransaction(newTransaction);
            }
        }
        else if (newTransaction.Type == "Outflow")
        {
            HandleOutflowTransaction();
        }
        else
        {
            TransactionService.AddTransaction(newTransaction);
        }

        NavigateToDashboard();
    }

    private void HandleOutflowTransaction()
    {
        var availableBalance = AvailableBalance;

        if (newTransaction.Amount <= availableBalance)
        {
            // If we have enough balance, just add the outflow
            TransactionService.AddTransaction(newTransaction);
        }
        else
        {
            // Add outflow for the amount we can cover
            TransactionService.AddTransaction(new TransactionItem
                {
                    Date = newTransaction.Date,
                    Title = newTransaction.Title,
                    Amount = newTransaction.Amount,
                    Type = "Outflow",
                    Notes = newTransaction.Notes,
                    Tag = newTransaction.Tag
                });

            // Create debt only for the amount that exceeds our available balance
            var debtAmount = newTransaction.Amount - availableBalance;
            var debtTransaction = new TransactionItem
                {
                    Date = newTransaction.Date,
                    Title = $"Debt for {newTransaction.Title}",
                    Amount = debtAmount,
                    Type = "Debt",
                    Notes = "Debt created for excess outflow",
                    Tag = newTransaction.Tag,
                    IsPaid = false
                };
            TransactionService.AddTransaction(debtTransaction);
        }
    }

    private void HandleDebtPayment(TransactionItem debt)
    {
        // Calculate how much of the inflow goes to debt payment
        var debtPaymentAmount = Math.Min(newTransaction.Amount, debt.Amount);

        // Create debt payment transaction
        var debtPayment = new TransactionItem
            {
                Date = newTransaction.Date,
                Title = $"Payment for {debt.Title}",
                Amount = debtPaymentAmount,
                Type = "DebtPayment",
                Notes = $"Payment for: {debt.Title}",
                RelatedTransactionId = debt.Id
            };

        // Add the debt payment transaction
        TransactionService.AddTransaction(debtPayment);

        // Update the original debt's amount or mark it as paid
        var originalDebt = TransactionService.Transactions
            .FirstOrDefault(t => t.Id == debt.Id);

        if (originalDebt != null)
        {
            originalDebt.Amount -= debtPaymentAmount; // Reduce the debt amount
            if (originalDebt.Amount <= 0)
            {
                originalDebt.IsPaid = true; // Mark debt as paid if fully cleared
            }
        }

        // If there's remaining amount after debt payment, add it as regular inflow
        var remainingAmount = newTransaction.Amount - debtPaymentAmount;
        if (remainingAmount > 0)
        {
            var remainingInflow = new TransactionItem
                {
                    Date = newTransaction.Date,
                    Title = $"{newTransaction.Title} (Remaining after debt payment)",
                    Amount = remainingAmount,
                    Type = "Inflow",
                    Notes = newTransaction.Notes,
                    Tag = newTransaction.Tag
                };
            TransactionService.AddTransaction(remainingInflow);
        }
    }


    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }
}
